apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

ext["signing.keyId"] = project.getProperty('signing.opensource.key')
ext["signing.password"] = project.getProperty('signing.opensource.password')
ext["signing.secretKeyRingFile"] = project.getProperty('signing.opensource.file')

group = pom_info.group
version = pom_info.artifact.version

task cleanLocalPublish(type: GradleBuild) {
    group = "publishing"
    tasks = ['clean', 'assemble', 'publishReleasePublicationToMavenLocal']
}

task cleanSonatypePublish(type: GradleBuild) {
    group = "publishing"
    tasks = ['clean', 'assemble', 'publishReleasePublicationToSonatypeRepository']
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        // For Android libraries
        from android.sourceSets.main.kotlin.srcDirs
        exclude '**/BuildConfig.java'
    } else {
        // For pure Kotlin libraries, in case you have them
        from sourceSets.main.kotlin.srcDirs
    }
}

task javadocJar(type: Jar, dependsOn: dokka) {
    getArchiveClassifier().set('javadoc')
    from dokka.outputDirectory
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = pom_info.group
            artifactId = pom_info.artifact.id
            version = pom_info.artifact.version

            if (project.plugins.findPlugin("com.android.library")) {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact("$buildDir/libs/${project.getName()}-${version}.jar")
            }
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = pom_info.artifact.name
                packaging = pom_info.packaging
                description = pom_info.artifact.description
                url = pom_info.repo.url

                scm {
                    url = pom_info.scm.url
                    connection = pom_info.scm.connection
                    developerConnection = pom_info.scm.dev_connection
                }

                licenses {
                    license {
                        name = pom_info.license.name
                        url = pom_info.license.url
                        distribution = pom_info.license.dist
                    }
                }

                developers {
                    developer {
                        id = pom_info.developer.id
                        name = pom_info.developer.name
                    }
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = getProperty("nexus.username")
                password = getProperty("nexus.password")
            }
        }
    }
}

signing {
    sign publishing.publications
}

nexusStaging {
    packageGroup = pom_info.group
    username = getProperty("nexus.username")
    password = getProperty("nexus.password")
}